<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Bartosz Zieliński</title>
    <link>https://bartoszpzielinski.github.io/</link>
    <description>Recent content in Blog on Bartosz Zieliński</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jan 2023 19:51:32 +0100</lastBuildDate><atom:link href="https://bartoszpzielinski.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Readers-Writers Problem</title>
      <link>https://bartoszpzielinski.github.io/posts/readers-writers/</link>
      <pubDate>Thu, 09 Mar 2023 11:06:44 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/posts/readers-writers/</guid>
      <description>Consider reading previous posts about threads in python and locks and previous post about condition variables for a necessary background if you are not familiar with python threading and concurrency control.
Introduction The readers-writers problem is one of the classic synchronization problems in concurrency (together with mutual exclusion and the producer-consumer problem) that every computer scientist should know about. We start with the following observation: Operations on shared data should be done within critical sections, to exclude the possibility of two threads modifying the data simultaneously.</description>
    </item>
    
    <item>
      <title>Condition Variables, Part II</title>
      <link>https://bartoszpzielinski.github.io/posts/condition-variables-ii/</link>
      <pubDate>Mon, 06 Mar 2023 19:57:01 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/posts/condition-variables-ii/</guid>
      <description>In a previous post about condition variables we introduced condition variables in Python, and we have shown how can they be used to solve producer-consumer problem. In this post we will tackle the problem of synchronizing threads so that they all reach certain milestone in the code before proceeding further, i.e., we will show how to implement barriers using condtion variables. Before that, we introduce gates: very useful synchronization primitives, easily implementable using condition variables.</description>
    </item>
    
    <item>
      <title>Condition Variables, Part I</title>
      <link>https://bartoszpzielinski.github.io/posts/condition-variables/</link>
      <pubDate>Thu, 02 Mar 2023 15:08:47 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/posts/condition-variables/</guid>
      <description>Introduction In a previous post about threads we introduced locks from threading module in Python. Locks are a specialized mechanism used to protect a critical section. More general synchronization patterns require the use of other mechanisms such as semaphores, or condition variables discussed here.
Condition variables are a synchronization mechanism used, as the name suggests, to suspend the operation of a thread until a certain condition (usually concerning shared data) is met.</description>
    </item>
    
    <item>
      <title>Threads in Python</title>
      <link>https://bartoszpzielinski.github.io/posts/python-threads/</link>
      <pubDate>Sat, 25 Feb 2023 09:59:29 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/posts/python-threads/</guid>
      <description>Module threading in Python3 contains functions and objects supporting creation, usage and synchronization of threads. Importantly, this module is portable: scripts using threading should work the same way under Linux, Windows, Mac, and other operating systems.
One limitation of threading module (at least in the CPython implementation) is a global interpreter lock which must be acquired by any thread executing Python interpreter. This effectively makes it impossible for pure Python threads within the same process to execute concurrently on multiple processor cores.</description>
    </item>
    
    <item>
      <title>Alternate Data Streams</title>
      <link>https://bartoszpzielinski.github.io/posts/alternative-data-streams/</link>
      <pubDate>Sat, 21 Jan 2023 09:18:30 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/posts/alternative-data-streams/</guid>
      <description>Hidden data in NTFS Both files and folders in NTFS file system can have additional “forks” of data called alternate data streams (ADS-es in short). If this reminds you of forks on Mac then this is no coincidence: this feature was added to Windows NT explicitly as a support for compatibility with Mac&amp;rsquo;s HFS. In general, the ability to add additional named attachments to any file of folder is a wonderful idea.</description>
    </item>
    
    <item>
      <title>Cookies</title>
      <link>https://bartoszpzielinski.github.io/cookies/</link>
      <pubDate>Fri, 20 Jan 2023 01:06:21 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/cookies/</guid>
      <description>The author of this page does not track his visitors on his own. He also does not use any social buttons. That said, this page is hosted on GitHub which may use non-essential cookies, though it seems not to, and, in fact, I haven&amp;rsquo;t found any as yet. Also, the site uses Google fonts and, on some posts, several reputable javascript libraries like MathJax and Mermaidjs hosted not locally but on CDN&amp;rsquo;s.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://bartoszpzielinski.github.io/projects/</link>
      <pubDate>Fri, 20 Jan 2023 00:30:48 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/projects/</guid>
      <description>Below is an (incomplete) list of my projects (software and other) with short descriptions and links
Maude Query Language Maude Query Language is a implementation in a rewriting system Maude of a multiset query and DML language based on term matching, together with a simple simulation framework. Its intended application of this software is specification of data-centric business processes and their analysis through simulation and reachability analysis.
Some additional information can be found here:</description>
    </item>
    
    <item>
      <title>Publications</title>
      <link>https://bartoszpzielinski.github.io/publications/</link>
      <pubDate>Fri, 20 Jan 2023 00:30:30 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/publications/</guid>
      <description>Mathematics/physics B. Zieliński, „An idempotent for a Jordanian quantum complex sphere”, Banach Center Publ. 61 (2003), 345-348, DOI: 10.4064/bc61-0-21. bibtex@article{z-b03, title={An idempotent for a {J}ordanian quantum complex sphere}, author={Zieli{\&#39;n}ski, Bartosz}, journal={Banach Center Publications}, volume={61}, pages={345--348}, year={2003}, publisher={Instytut Matematyczny Polskiej Akademii Nauk}, doi={10.4064/bc61-0-21} }T. Brzeziński, L. Dąbrowski, B. Zieliński, „Hopf fibration and monopole connection over the contact quantum spheres”, J. Geom. Phys. Vol. 50, Issues 1–4, April 2004, 345–359. DOI: 10.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://bartoszpzielinski.github.io/about/</link>
      <pubDate>Fri, 20 Jan 2023 00:30:16 +0100</pubDate>
      
      <guid>https://bartoszpzielinski.github.io/about/</guid>
      <description>Contact Bartosz Zieliński
email: bartosz.zielinski@fis.uni.lodz.pl
Department of Computer Science
Faculty of Physics and Applied Informatics
University of Łódź
ul. Pomorska 149/153
90-236 Łódź
Publications &amp;amp; research Below are my profiles:
Orcid: 0000-0003-3534-6012 Google Scholar dblp See also the list of my publications on this site.
Software and other projects See the selected list of my projects on this site</description>
    </item>
    
  </channel>
</rss>
